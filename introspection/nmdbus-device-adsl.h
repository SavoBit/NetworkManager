/*
 * Generated by gdbus-codegen 2.40.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __NMDBUS_DEVICE_ADSL_H__
#define __NMDBUS_DEVICE_ADSL_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.Adsl */

#define NMDBUS_TYPE_DEVICE_ADSL (nmdbus_device_adsl_get_type ())
#define NMDBUS_DEVICE_ADSL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_ADSL, NMDBusDeviceAdsl))
#define NMDBUS_IS_DEVICE_ADSL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_ADSL))
#define NMDBUS_DEVICE_ADSL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_ADSL, NMDBusDeviceAdslIface))

struct _NMDBusDeviceAdsl;
typedef struct _NMDBusDeviceAdsl NMDBusDeviceAdsl;
typedef struct _NMDBusDeviceAdslIface NMDBusDeviceAdslIface;

struct _NMDBusDeviceAdslIface
{
  GTypeInterface parent_iface;


  gboolean  (*get_carrier) (NMDBusDeviceAdsl *object);

  void (*properties_changed) (
    NMDBusDeviceAdsl *object,
    GVariant *arg_properties);

};

GType nmdbus_device_adsl_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_adsl_interface_info (void);
guint nmdbus_device_adsl_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus signal emissions functions: */
void nmdbus_device_adsl_emit_properties_changed (
    NMDBusDeviceAdsl *object,
    GVariant *arg_properties);



/* D-Bus property accessors: */
gboolean nmdbus_device_adsl_get_carrier (NMDBusDeviceAdsl *object);
void nmdbus_device_adsl_set_carrier (NMDBusDeviceAdsl *object, gboolean value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_ADSL_PROXY (nmdbus_device_adsl_proxy_get_type ())
#define NMDBUS_DEVICE_ADSL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_ADSL_PROXY, NMDBusDeviceAdslProxy))
#define NMDBUS_DEVICE_ADSL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_ADSL_PROXY, NMDBusDeviceAdslProxyClass))
#define NMDBUS_DEVICE_ADSL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_ADSL_PROXY, NMDBusDeviceAdslProxyClass))
#define NMDBUS_IS_DEVICE_ADSL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_ADSL_PROXY))
#define NMDBUS_IS_DEVICE_ADSL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_ADSL_PROXY))

typedef struct _NMDBusDeviceAdslProxy NMDBusDeviceAdslProxy;
typedef struct _NMDBusDeviceAdslProxyClass NMDBusDeviceAdslProxyClass;
typedef struct _NMDBusDeviceAdslProxyPrivate NMDBusDeviceAdslProxyPrivate;

struct _NMDBusDeviceAdslProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceAdslProxyPrivate *priv;
};

struct _NMDBusDeviceAdslProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_adsl_proxy_get_type (void) G_GNUC_CONST;

void nmdbus_device_adsl_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceAdsl *nmdbus_device_adsl_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceAdsl *nmdbus_device_adsl_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_adsl_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceAdsl *nmdbus_device_adsl_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceAdsl *nmdbus_device_adsl_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_ADSL_SKELETON (nmdbus_device_adsl_skeleton_get_type ())
#define NMDBUS_DEVICE_ADSL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_ADSL_SKELETON, NMDBusDeviceAdslSkeleton))
#define NMDBUS_DEVICE_ADSL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_ADSL_SKELETON, NMDBusDeviceAdslSkeletonClass))
#define NMDBUS_DEVICE_ADSL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_ADSL_SKELETON, NMDBusDeviceAdslSkeletonClass))
#define NMDBUS_IS_DEVICE_ADSL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_ADSL_SKELETON))
#define NMDBUS_IS_DEVICE_ADSL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_ADSL_SKELETON))

typedef struct _NMDBusDeviceAdslSkeleton NMDBusDeviceAdslSkeleton;
typedef struct _NMDBusDeviceAdslSkeletonClass NMDBusDeviceAdslSkeletonClass;
typedef struct _NMDBusDeviceAdslSkeletonPrivate NMDBusDeviceAdslSkeletonPrivate;

struct _NMDBusDeviceAdslSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceAdslSkeletonPrivate *priv;
};

struct _NMDBusDeviceAdslSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_adsl_skeleton_get_type (void) G_GNUC_CONST;

NMDBusDeviceAdsl *nmdbus_device_adsl_skeleton_new (void);


G_END_DECLS

#endif /* __NMDBUS_DEVICE_ADSL_H__ */
