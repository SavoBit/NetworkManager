/*
 * Generated by gdbus-codegen 2.40.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __NMDBUS_DEVICE_GRE_H__
#define __NMDBUS_DEVICE_GRE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.Gre */

#define NMDBUS_TYPE_DEVICE_GRE (nmdbus_device_gre_get_type ())
#define NMDBUS_DEVICE_GRE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_GRE, NMDBusDeviceGre))
#define NMDBUS_IS_DEVICE_GRE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_GRE))
#define NMDBUS_DEVICE_GRE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_GRE, NMDBusDeviceGreIface))

struct _NMDBusDeviceGre;
typedef struct _NMDBusDeviceGre NMDBusDeviceGre;
typedef struct _NMDBusDeviceGreIface NMDBusDeviceGreIface;

struct _NMDBusDeviceGreIface
{
  GTypeInterface parent_iface;


  guint16  (*get_input_flags) (NMDBusDeviceGre *object);

  guint  (*get_input_key) (NMDBusDeviceGre *object);

  const gchar * (*get_local) (NMDBusDeviceGre *object);

  guint16  (*get_output_flags) (NMDBusDeviceGre *object);

  guint  (*get_output_key) (NMDBusDeviceGre *object);

  const gchar * (*get_parent) (NMDBusDeviceGre *object);

  gboolean  (*get_path_mtu_discovery) (NMDBusDeviceGre *object);

  const gchar * (*get_remote) (NMDBusDeviceGre *object);

  guchar  (*get_tos) (NMDBusDeviceGre *object);

  guchar  (*get_ttl) (NMDBusDeviceGre *object);

  void (*properties_changed) (
    NMDBusDeviceGre *object,
    GVariant *arg_properties);

};

GType nmdbus_device_gre_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_gre_interface_info (void);
guint nmdbus_device_gre_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus signal emissions functions: */
void nmdbus_device_gre_emit_properties_changed (
    NMDBusDeviceGre *object,
    GVariant *arg_properties);



/* D-Bus property accessors: */
const gchar *nmdbus_device_gre_get_parent (NMDBusDeviceGre *object);
gchar *nmdbus_device_gre_dup_parent (NMDBusDeviceGre *object);
void nmdbus_device_gre_set_parent (NMDBusDeviceGre *object, const gchar *value);

guint16 nmdbus_device_gre_get_input_flags (NMDBusDeviceGre *object);
void nmdbus_device_gre_set_input_flags (NMDBusDeviceGre *object, guint16 value);

guint16 nmdbus_device_gre_get_output_flags (NMDBusDeviceGre *object);
void nmdbus_device_gre_set_output_flags (NMDBusDeviceGre *object, guint16 value);

guint nmdbus_device_gre_get_input_key (NMDBusDeviceGre *object);
void nmdbus_device_gre_set_input_key (NMDBusDeviceGre *object, guint value);

guint nmdbus_device_gre_get_output_key (NMDBusDeviceGre *object);
void nmdbus_device_gre_set_output_key (NMDBusDeviceGre *object, guint value);

const gchar *nmdbus_device_gre_get_local (NMDBusDeviceGre *object);
gchar *nmdbus_device_gre_dup_local (NMDBusDeviceGre *object);
void nmdbus_device_gre_set_local (NMDBusDeviceGre *object, const gchar *value);

const gchar *nmdbus_device_gre_get_remote (NMDBusDeviceGre *object);
gchar *nmdbus_device_gre_dup_remote (NMDBusDeviceGre *object);
void nmdbus_device_gre_set_remote (NMDBusDeviceGre *object, const gchar *value);

guchar nmdbus_device_gre_get_ttl (NMDBusDeviceGre *object);
void nmdbus_device_gre_set_ttl (NMDBusDeviceGre *object, guchar value);

guchar nmdbus_device_gre_get_tos (NMDBusDeviceGre *object);
void nmdbus_device_gre_set_tos (NMDBusDeviceGre *object, guchar value);

gboolean nmdbus_device_gre_get_path_mtu_discovery (NMDBusDeviceGre *object);
void nmdbus_device_gre_set_path_mtu_discovery (NMDBusDeviceGre *object, gboolean value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_GRE_PROXY (nmdbus_device_gre_proxy_get_type ())
#define NMDBUS_DEVICE_GRE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_GRE_PROXY, NMDBusDeviceGreProxy))
#define NMDBUS_DEVICE_GRE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_GRE_PROXY, NMDBusDeviceGreProxyClass))
#define NMDBUS_DEVICE_GRE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_GRE_PROXY, NMDBusDeviceGreProxyClass))
#define NMDBUS_IS_DEVICE_GRE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_GRE_PROXY))
#define NMDBUS_IS_DEVICE_GRE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_GRE_PROXY))

typedef struct _NMDBusDeviceGreProxy NMDBusDeviceGreProxy;
typedef struct _NMDBusDeviceGreProxyClass NMDBusDeviceGreProxyClass;
typedef struct _NMDBusDeviceGreProxyPrivate NMDBusDeviceGreProxyPrivate;

struct _NMDBusDeviceGreProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceGreProxyPrivate *priv;
};

struct _NMDBusDeviceGreProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_gre_proxy_get_type (void) G_GNUC_CONST;

void nmdbus_device_gre_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceGre *nmdbus_device_gre_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceGre *nmdbus_device_gre_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_gre_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceGre *nmdbus_device_gre_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceGre *nmdbus_device_gre_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_GRE_SKELETON (nmdbus_device_gre_skeleton_get_type ())
#define NMDBUS_DEVICE_GRE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_GRE_SKELETON, NMDBusDeviceGreSkeleton))
#define NMDBUS_DEVICE_GRE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_GRE_SKELETON, NMDBusDeviceGreSkeletonClass))
#define NMDBUS_DEVICE_GRE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_GRE_SKELETON, NMDBusDeviceGreSkeletonClass))
#define NMDBUS_IS_DEVICE_GRE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_GRE_SKELETON))
#define NMDBUS_IS_DEVICE_GRE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_GRE_SKELETON))

typedef struct _NMDBusDeviceGreSkeleton NMDBusDeviceGreSkeleton;
typedef struct _NMDBusDeviceGreSkeletonClass NMDBusDeviceGreSkeletonClass;
typedef struct _NMDBusDeviceGreSkeletonPrivate NMDBusDeviceGreSkeletonPrivate;

struct _NMDBusDeviceGreSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceGreSkeletonPrivate *priv;
};

struct _NMDBusDeviceGreSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_gre_skeleton_get_type (void) G_GNUC_CONST;

NMDBusDeviceGre *nmdbus_device_gre_skeleton_new (void);


G_END_DECLS

#endif /* __NMDBUS_DEVICE_GRE_H__ */
