/*
 * Generated by gdbus-codegen 2.40.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __NMDBUS_ACTIVE_CONNECTION_H__
#define __NMDBUS_ACTIVE_CONNECTION_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Connection.Active */

#define NMDBUS_TYPE_CONNECTION_ACTIVE (nmdbus_connection_active_get_type ())
#define NMDBUS_CONNECTION_ACTIVE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_CONNECTION_ACTIVE, NMDBusConnectionActive))
#define NMDBUS_IS_CONNECTION_ACTIVE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_CONNECTION_ACTIVE))
#define NMDBUS_CONNECTION_ACTIVE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_CONNECTION_ACTIVE, NMDBusConnectionActiveIface))

struct _NMDBusConnectionActive;
typedef struct _NMDBusConnectionActive NMDBusConnectionActive;
typedef struct _NMDBusConnectionActiveIface NMDBusConnectionActiveIface;

struct _NMDBusConnectionActiveIface
{
  GTypeInterface parent_iface;


  const gchar * (*get_connection) (NMDBusConnectionActive *object);

  gboolean  (*get_default) (NMDBusConnectionActive *object);

  gboolean  (*get_default6) (NMDBusConnectionActive *object);

  const gchar *const * (*get_devices) (NMDBusConnectionActive *object);

  const gchar * (*get_dhcp4_config) (NMDBusConnectionActive *object);

  const gchar * (*get_dhcp6_config) (NMDBusConnectionActive *object);

  const gchar * (*get_id) (NMDBusConnectionActive *object);

  const gchar * (*get_ip4_config) (NMDBusConnectionActive *object);

  const gchar * (*get_ip6_config) (NMDBusConnectionActive *object);

  const gchar * (*get_master) (NMDBusConnectionActive *object);

  const gchar * (*get_specific_object) (NMDBusConnectionActive *object);

  guint  (*get_state) (NMDBusConnectionActive *object);

  const gchar * (*get_type_) (NMDBusConnectionActive *object);

  const gchar * (*get_uuid) (NMDBusConnectionActive *object);

  gboolean  (*get_vpn) (NMDBusConnectionActive *object);

  void (*properties_changed) (
    NMDBusConnectionActive *object,
    GVariant *arg_properties);

};

GType nmdbus_connection_active_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_connection_active_interface_info (void);
guint nmdbus_connection_active_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus signal emissions functions: */
void nmdbus_connection_active_emit_properties_changed (
    NMDBusConnectionActive *object,
    GVariant *arg_properties);



/* D-Bus property accessors: */
const gchar *nmdbus_connection_active_get_connection (NMDBusConnectionActive *object);
gchar *nmdbus_connection_active_dup_connection (NMDBusConnectionActive *object);
void nmdbus_connection_active_set_connection (NMDBusConnectionActive *object, const gchar *value);

const gchar *nmdbus_connection_active_get_specific_object (NMDBusConnectionActive *object);
gchar *nmdbus_connection_active_dup_specific_object (NMDBusConnectionActive *object);
void nmdbus_connection_active_set_specific_object (NMDBusConnectionActive *object, const gchar *value);

const gchar *nmdbus_connection_active_get_id (NMDBusConnectionActive *object);
gchar *nmdbus_connection_active_dup_id (NMDBusConnectionActive *object);
void nmdbus_connection_active_set_id (NMDBusConnectionActive *object, const gchar *value);

const gchar *nmdbus_connection_active_get_uuid (NMDBusConnectionActive *object);
gchar *nmdbus_connection_active_dup_uuid (NMDBusConnectionActive *object);
void nmdbus_connection_active_set_uuid (NMDBusConnectionActive *object, const gchar *value);

const gchar *nmdbus_connection_active_get_type_ (NMDBusConnectionActive *object);
gchar *nmdbus_connection_active_dup_type_ (NMDBusConnectionActive *object);
void nmdbus_connection_active_set_type_ (NMDBusConnectionActive *object, const gchar *value);

const gchar *const *nmdbus_connection_active_get_devices (NMDBusConnectionActive *object);
gchar **nmdbus_connection_active_dup_devices (NMDBusConnectionActive *object);
void nmdbus_connection_active_set_devices (NMDBusConnectionActive *object, const gchar *const *value);

guint nmdbus_connection_active_get_state (NMDBusConnectionActive *object);
void nmdbus_connection_active_set_state (NMDBusConnectionActive *object, guint value);

gboolean nmdbus_connection_active_get_default (NMDBusConnectionActive *object);
void nmdbus_connection_active_set_default (NMDBusConnectionActive *object, gboolean value);

const gchar *nmdbus_connection_active_get_ip4_config (NMDBusConnectionActive *object);
gchar *nmdbus_connection_active_dup_ip4_config (NMDBusConnectionActive *object);
void nmdbus_connection_active_set_ip4_config (NMDBusConnectionActive *object, const gchar *value);

const gchar *nmdbus_connection_active_get_dhcp4_config (NMDBusConnectionActive *object);
gchar *nmdbus_connection_active_dup_dhcp4_config (NMDBusConnectionActive *object);
void nmdbus_connection_active_set_dhcp4_config (NMDBusConnectionActive *object, const gchar *value);

gboolean nmdbus_connection_active_get_default6 (NMDBusConnectionActive *object);
void nmdbus_connection_active_set_default6 (NMDBusConnectionActive *object, gboolean value);

const gchar *nmdbus_connection_active_get_ip6_config (NMDBusConnectionActive *object);
gchar *nmdbus_connection_active_dup_ip6_config (NMDBusConnectionActive *object);
void nmdbus_connection_active_set_ip6_config (NMDBusConnectionActive *object, const gchar *value);

const gchar *nmdbus_connection_active_get_dhcp6_config (NMDBusConnectionActive *object);
gchar *nmdbus_connection_active_dup_dhcp6_config (NMDBusConnectionActive *object);
void nmdbus_connection_active_set_dhcp6_config (NMDBusConnectionActive *object, const gchar *value);

gboolean nmdbus_connection_active_get_vpn (NMDBusConnectionActive *object);
void nmdbus_connection_active_set_vpn (NMDBusConnectionActive *object, gboolean value);

const gchar *nmdbus_connection_active_get_master (NMDBusConnectionActive *object);
gchar *nmdbus_connection_active_dup_master (NMDBusConnectionActive *object);
void nmdbus_connection_active_set_master (NMDBusConnectionActive *object, const gchar *value);


/* ---- */

#define NMDBUS_TYPE_CONNECTION_ACTIVE_PROXY (nmdbus_connection_active_proxy_get_type ())
#define NMDBUS_CONNECTION_ACTIVE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_CONNECTION_ACTIVE_PROXY, NMDBusConnectionActiveProxy))
#define NMDBUS_CONNECTION_ACTIVE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_CONNECTION_ACTIVE_PROXY, NMDBusConnectionActiveProxyClass))
#define NMDBUS_CONNECTION_ACTIVE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_CONNECTION_ACTIVE_PROXY, NMDBusConnectionActiveProxyClass))
#define NMDBUS_IS_CONNECTION_ACTIVE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_CONNECTION_ACTIVE_PROXY))
#define NMDBUS_IS_CONNECTION_ACTIVE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_CONNECTION_ACTIVE_PROXY))

typedef struct _NMDBusConnectionActiveProxy NMDBusConnectionActiveProxy;
typedef struct _NMDBusConnectionActiveProxyClass NMDBusConnectionActiveProxyClass;
typedef struct _NMDBusConnectionActiveProxyPrivate NMDBusConnectionActiveProxyPrivate;

struct _NMDBusConnectionActiveProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusConnectionActiveProxyPrivate *priv;
};

struct _NMDBusConnectionActiveProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_connection_active_proxy_get_type (void) G_GNUC_CONST;

void nmdbus_connection_active_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusConnectionActive *nmdbus_connection_active_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusConnectionActive *nmdbus_connection_active_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_connection_active_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusConnectionActive *nmdbus_connection_active_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusConnectionActive *nmdbus_connection_active_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_CONNECTION_ACTIVE_SKELETON (nmdbus_connection_active_skeleton_get_type ())
#define NMDBUS_CONNECTION_ACTIVE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_CONNECTION_ACTIVE_SKELETON, NMDBusConnectionActiveSkeleton))
#define NMDBUS_CONNECTION_ACTIVE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_CONNECTION_ACTIVE_SKELETON, NMDBusConnectionActiveSkeletonClass))
#define NMDBUS_CONNECTION_ACTIVE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_CONNECTION_ACTIVE_SKELETON, NMDBusConnectionActiveSkeletonClass))
#define NMDBUS_IS_CONNECTION_ACTIVE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_CONNECTION_ACTIVE_SKELETON))
#define NMDBUS_IS_CONNECTION_ACTIVE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_CONNECTION_ACTIVE_SKELETON))

typedef struct _NMDBusConnectionActiveSkeleton NMDBusConnectionActiveSkeleton;
typedef struct _NMDBusConnectionActiveSkeletonClass NMDBusConnectionActiveSkeletonClass;
typedef struct _NMDBusConnectionActiveSkeletonPrivate NMDBusConnectionActiveSkeletonPrivate;

struct _NMDBusConnectionActiveSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusConnectionActiveSkeletonPrivate *priv;
};

struct _NMDBusConnectionActiveSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_connection_active_skeleton_get_type (void) G_GNUC_CONST;

NMDBusConnectionActive *nmdbus_connection_active_skeleton_new (void);


G_END_DECLS

#endif /* __NMDBUS_ACTIVE_CONNECTION_H__ */
