/*
 * Generated by gdbus-codegen 2.40.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __NMDBUS_DEVICE_MACVLAN_H__
#define __NMDBUS_DEVICE_MACVLAN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.NetworkManager.Device.Macvlan */

#define NMDBUS_TYPE_DEVICE_MACVLAN (nmdbus_device_macvlan_get_type ())
#define NMDBUS_DEVICE_MACVLAN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_MACVLAN, NMDBusDeviceMacvlan))
#define NMDBUS_IS_DEVICE_MACVLAN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_MACVLAN))
#define NMDBUS_DEVICE_MACVLAN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NMDBUS_TYPE_DEVICE_MACVLAN, NMDBusDeviceMacvlanIface))

struct _NMDBusDeviceMacvlan;
typedef struct _NMDBusDeviceMacvlan NMDBusDeviceMacvlan;
typedef struct _NMDBusDeviceMacvlanIface NMDBusDeviceMacvlanIface;

struct _NMDBusDeviceMacvlanIface
{
  GTypeInterface parent_iface;


  const gchar * (*get_mode) (NMDBusDeviceMacvlan *object);

  gboolean  (*get_no_promisc) (NMDBusDeviceMacvlan *object);

  const gchar * (*get_parent) (NMDBusDeviceMacvlan *object);

  void (*properties_changed) (
    NMDBusDeviceMacvlan *object,
    GVariant *arg_properties);

};

GType nmdbus_device_macvlan_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *nmdbus_device_macvlan_interface_info (void);
guint nmdbus_device_macvlan_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus signal emissions functions: */
void nmdbus_device_macvlan_emit_properties_changed (
    NMDBusDeviceMacvlan *object,
    GVariant *arg_properties);



/* D-Bus property accessors: */
const gchar *nmdbus_device_macvlan_get_parent (NMDBusDeviceMacvlan *object);
gchar *nmdbus_device_macvlan_dup_parent (NMDBusDeviceMacvlan *object);
void nmdbus_device_macvlan_set_parent (NMDBusDeviceMacvlan *object, const gchar *value);

const gchar *nmdbus_device_macvlan_get_mode (NMDBusDeviceMacvlan *object);
gchar *nmdbus_device_macvlan_dup_mode (NMDBusDeviceMacvlan *object);
void nmdbus_device_macvlan_set_mode (NMDBusDeviceMacvlan *object, const gchar *value);

gboolean nmdbus_device_macvlan_get_no_promisc (NMDBusDeviceMacvlan *object);
void nmdbus_device_macvlan_set_no_promisc (NMDBusDeviceMacvlan *object, gboolean value);


/* ---- */

#define NMDBUS_TYPE_DEVICE_MACVLAN_PROXY (nmdbus_device_macvlan_proxy_get_type ())
#define NMDBUS_DEVICE_MACVLAN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_MACVLAN_PROXY, NMDBusDeviceMacvlanProxy))
#define NMDBUS_DEVICE_MACVLAN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_MACVLAN_PROXY, NMDBusDeviceMacvlanProxyClass))
#define NMDBUS_DEVICE_MACVLAN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_MACVLAN_PROXY, NMDBusDeviceMacvlanProxyClass))
#define NMDBUS_IS_DEVICE_MACVLAN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_MACVLAN_PROXY))
#define NMDBUS_IS_DEVICE_MACVLAN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_MACVLAN_PROXY))

typedef struct _NMDBusDeviceMacvlanProxy NMDBusDeviceMacvlanProxy;
typedef struct _NMDBusDeviceMacvlanProxyClass NMDBusDeviceMacvlanProxyClass;
typedef struct _NMDBusDeviceMacvlanProxyPrivate NMDBusDeviceMacvlanProxyPrivate;

struct _NMDBusDeviceMacvlanProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NMDBusDeviceMacvlanProxyPrivate *priv;
};

struct _NMDBusDeviceMacvlanProxyClass
{
  GDBusProxyClass parent_class;
};

GType nmdbus_device_macvlan_proxy_get_type (void) G_GNUC_CONST;

void nmdbus_device_macvlan_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceMacvlan *nmdbus_device_macvlan_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceMacvlan *nmdbus_device_macvlan_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void nmdbus_device_macvlan_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NMDBusDeviceMacvlan *nmdbus_device_macvlan_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NMDBusDeviceMacvlan *nmdbus_device_macvlan_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NMDBUS_TYPE_DEVICE_MACVLAN_SKELETON (nmdbus_device_macvlan_skeleton_get_type ())
#define NMDBUS_DEVICE_MACVLAN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NMDBUS_TYPE_DEVICE_MACVLAN_SKELETON, NMDBusDeviceMacvlanSkeleton))
#define NMDBUS_DEVICE_MACVLAN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NMDBUS_TYPE_DEVICE_MACVLAN_SKELETON, NMDBusDeviceMacvlanSkeletonClass))
#define NMDBUS_DEVICE_MACVLAN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NMDBUS_TYPE_DEVICE_MACVLAN_SKELETON, NMDBusDeviceMacvlanSkeletonClass))
#define NMDBUS_IS_DEVICE_MACVLAN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NMDBUS_TYPE_DEVICE_MACVLAN_SKELETON))
#define NMDBUS_IS_DEVICE_MACVLAN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NMDBUS_TYPE_DEVICE_MACVLAN_SKELETON))

typedef struct _NMDBusDeviceMacvlanSkeleton NMDBusDeviceMacvlanSkeleton;
typedef struct _NMDBusDeviceMacvlanSkeletonClass NMDBusDeviceMacvlanSkeletonClass;
typedef struct _NMDBusDeviceMacvlanSkeletonPrivate NMDBusDeviceMacvlanSkeletonPrivate;

struct _NMDBusDeviceMacvlanSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NMDBusDeviceMacvlanSkeletonPrivate *priv;
};

struct _NMDBusDeviceMacvlanSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType nmdbus_device_macvlan_skeleton_get_type (void) G_GNUC_CONST;

NMDBusDeviceMacvlan *nmdbus_device_macvlan_skeleton_new (void);


G_END_DECLS

#endif /* __NMDBUS_DEVICE_MACVLAN_H__ */
